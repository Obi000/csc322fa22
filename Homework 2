const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 500);
camera.position.set(0, 20, 100);
camera.lookAt(0, 25, 50);
var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Color for Side 1: Green

const geometry = new THREE.BufferGeometry();
// create a simple square shape and copy the top left and bottom right

const vertices = new Float32Array([
  -2.75, 0, 2.75,
  2.75, 0, 2.75,
  1.7, 50, 1.7,

  1.7, 50, 1.7,
  -1.7, 50, 1.7,
  -1.7, 0, 2.75
]);

geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
const material = new THREE.MeshBasicMaterial({
  color: 0x00FF00
});
const mesh = new THREE.Mesh(geometry, material);



//Color for Side 2: Green-Gray
const geometry1 = new THREE.BufferGeometry();
const vertices1 = new Float32Array([
  2.75, 0, 2.75,
  2.75, 0, -2.75,
  1.7, 50, -1.7,

  1.7, 50, -1.7,
  1.7, 50, 1.7,
  1.7, 0, 2.75,
]);
geometry1.setAttribute('position', new THREE.BufferAttribute(vertices1, 3));
const sidecolor1 = new THREE.Color("hsl(80, 20%, 35%)")
const material1 = new THREE.MeshBasicMaterial({
  color: sidecolor1
});
const mesh1 = new THREE.Mesh(geometry1, material1);


// Color for Side 3: Orange

const geometry2 = new THREE.BufferGeometry();
const vertices2 = new Float32Array([
  2.75, 0, -2.75,
  -2.75, 0, -2.75,
  -1.7, 50, -1.7,

  -1.7, 50, -1.7,
  1.7, 50, -1.7,
  1.7, 0, -2.75,
]);
geometry2.setAttribute('position', new THREE.BufferAttribute(vertices2, 3));
const material2 = new THREE.MeshBasicMaterial({
  color: 0xFFA500
});
const mesh2 = new THREE.Mesh(geometry2, material2);

// sColor for Side 4: Red

const geometry3 = new THREE.BufferGeometry();
const vertices3 = new Float32Array([
  -2.75, 0, -2.75,
  -2.75, 0, 2.75,
  -1.7, 50, 1.7,
  -1.7, 50, 1.7,
  -1.7, 50, -1.7,
  -1.7, 0, -2.75,
]);
geometry3.setAttribute('position', new THREE.BufferAttribute(vertices3, 3));
const material3 = new THREE.MeshBasicMaterial({
  color: 0xFF0000
});
const mesh3 = new THREE.Mesh(geometry3, material3);

// Color for Triangle 1: Violet 
const geometry4 = new THREE.BufferGeometry();
const vertices4 = new Float32Array([
  -1.7, 50, 1.7,
  1.7, 50.0, 1.7,
  0, 55, 0,
]);
geometry4.setAttribute('position', new THREE.BufferAttribute(vertices4, 3));
const sidecolor4 = new THREE.Color("rgb(155, 38, 182)");
const material4 = new THREE.MeshBasicMaterial({
  color: sidecolor4
});
const mesh4 = new THREE.Mesh(geometry4, material4);

// Color for Triangle 2 -  Gold 
const geometry5 = new THREE.BufferGeometry();
const vertices5 = new Float32Array([
  1.7, 50, 1.7,
  1.7, 50, -1.7,
  0, 55, 0,
]);
geometry5.setAttribute('position', new THREE.BufferAttribute(vertices5, 3));
const sidecolor5 = new THREE.Color("rgb(255%, 215%, 0%)");
const material5 = new THREE.MeshBasicMaterial({
  color: sidecolor5
});
const mesh5 = new THREE.Mesh(geometry5, material5);

//Color for Triangle 3 - Purple 
const geometry6 = new THREE.BufferGeometry();
const vertices6 = new Float32Array([
  1.7, 50, -1.7,
  -1.7, 50, -1.7,
  0, 55, 0,
]);
geometry6.setAttribute('position', new THREE.BufferAttribute(vertices6, 3));
const material6 = new THREE.MeshBasicMaterial({
  color: 0xA020F0
});
const mesh6 = new THREE.Mesh(geometry6, material6);

// Color for Triangle 4 - Pink 
const geometry7 = new THREE.BufferGeometry();
const vertices7 = new Float32Array([
  -1.7, 50, -1.7,
  -1.7, 50, 1.7,
  0, 55, 0,
]);
geometry7.setAttribute('position', new THREE.BufferAttribute(vertices7, 3));
const sidecolor7 = new THREE.Color("hsl(350, 100%, 80%)");
const material7 = new THREE.MeshBasicMaterial({
  color: sidecolor7
});
const mesh7 = new THREE.Mesh(geometry7, material7);
scene.add(mesh);
scene.add(mesh1);
scene.add(mesh2);
scene.add(mesh3);
scene.add(mesh4);
scene.add(mesh5);
scene.add(mesh6);
scene.add(mesh7);
camera.position.z = 90;

var animate = function() {
  requestAnimationFrame(animate);

  mesh.rotation.y += 0.01;
  mesh1.rotation.y += 0.01;
  mesh2.rotation.y += 0.01;
  mesh3.rotation.y += 0.01;
  mesh4.rotation.y += 0.01;
  mesh5.rotation.y += 0.01;
  mesh6.rotation.y += 0.01;
  mesh7.rotation.y += 0.01;


  renderer.render(scene, camera);
};

animate();
