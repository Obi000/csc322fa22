/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csc322classproject;

/**
 *
 * @author samuelnwuha
 */
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class CSC322ClassProject extends JPanel 
{
	// Limit of subdivided rectangles
	private static final int limits = 30;

	// Percentage of white rectangles
	private static final double white_rectangle = 0.60;

	// Colors of non-white rectangles
	private static final Color[] color_options = { Color.YELLOW, Color.RED,
			Color.BLUE, Color.CYAN };

	// Random number instance used to make decisions
	private Random randomNumber = new Random();

	// The Image in which the art is drawn
	private Image mondrianStyle;

	public CSC322ClassProject(int width, int height) 
        {
		// using width and height to determine size of panel
		setPreferredSize(new Dimension(width, height));
		// initializing image
		mondrianStyle = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		// fetching Graphics object from image
		Graphics2D first = (Graphics2D) mondrianStyle.getGraphics();
		// using a thicker pen
		first.setStroke(new BasicStroke(5));
		// calling subdivide method, passing 0,0 as x,y, width as width, height as
		// height, and first as Graphics2D object
		subdivide(0, 0, width, height, first);
	}

	public void paintComponent(Graphics image) 
        {
		super.paintComponent(image);
		// drawing the mondrianStyle image
		image.drawImage(mondrianStyle, 0, 0, null);
	}

	//recursive method
	private void subdivide(int x, int y, int w, int h, Graphics2D second) 
        {
		// base case, if w or h is below cut off
		if (w < limits || h < limits) 
                {
			// generating a random double between 0.0 and 1.0, checking if it is above white_rectangle,
			if (randomNumber.nextDouble() > white_rectangle) 
                        {
				// choosing a random color from color_options array
				second.setColor(color_options[randomNumber.nextInt(color_options.length)]);
				// drawing a filled rectangle
				second.fillRect(x, y, w, h);
			} 
                        
                        else 
                        {
				// otherwise drawing a white filled rectangle
				second.setColor(Color.WHITE);
				second.fillRect(x, y, w, h);
			}
			// drawing a black border
			second.setColor(Color.BLACK);
			second.drawRect(x, y, w, h);
		}
                
                else 
                {
			// otherwise checking if w is bigger than or equals h (finding the longer edge)
			if (w >= h) 
                        {
				// generates a new width between 1/3 w and and 3/4 w to split the current rectangle horizontally
				int w2 = randomNumber.nextInt((3 * w / 4) - (w / 3)) + (w / 3);
				// makes two recursive calls to subdivide, to draw left and right rectangles
				subdivide(x, y, w2, h, second);
				subdivide(x + w2, y, w - w2, h, second);
			} 
                        else 
                        {
				// generating a new height between 1/3 h and and 3/4 h to split the current rectangle vertically
				int h2 = randomNumber.nextInt((3 * h / 4) - (h / 3)) + (h / 3);
				// making two recursive calls to subdivide, to draw top and bottom rectangles
				subdivide(x, y, w, h2, second);
				subdivide(x, y + h2, w, h - h2, second);
			}

		}
	}

	public static void main(String[] args)
        {
		// create and display a 1500x900 mondrian style art in JFrame
		JFrame image_test = new JFrame();
		image_test.add(new CSC322ClassProject(1500, 900));
		image_test.pack();
		image_test.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		image_test.setVisible(true);
	}

}
